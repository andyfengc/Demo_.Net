using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using PayPal.PayPalAPIInterfaceService;
using PayPal.PayPalAPIInterfaceService.Model;

namespace PayPalAPISample.APICalls
{
    // The TransactionSearch API searches transaction history for transactions that meet the specified criteria.
    // Note: The maximum number of transactions that can be returned from a TransactionSearch API call is 100.
    public partial class TransactionSearch : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                this.startDate.Text = DateTime.Now.AddDays(-1).ToString("yyyy-MM-ddTHH:mm:ss");
                this.endDate.Text = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
            }
        }

        protected void calDate_SelectionChanged(object sender, EventArgs e)
        {
            Calendar calendar = (Calendar)sender;
            if(calendar.ID.Equals("calStartDate")) 
            {
                startDate.Text = calendar.SelectedDate.ToString("yyyy-MM-ddTHH:mm:ss");
            } 
            else if (calendar.ID.Equals("calEndDate")) 
            {
                endDate.Text = calendar.SelectedDate.ToString("yyyy-MM-ddTHH:mm:ss");
            }
        }


        protected void Search_Submit(object sender, EventArgs e)
        {
            // Create request object
            TransactionSearchRequestType request = new TransactionSearchRequestType();           
            if (transactionID.Value != string.Empty)
            {
                request.TransactionID = transactionID.Value;
            }
            // (Required) The earliest transaction date at which to start the search.
            if (startDate != null && startDate.Text != null)
            {
                request.StartDate = startDate.Text;
            }
            // (Optional) The latest transaction date to be included in the search.
            if (endDate != null && endDate.Text != null)
            {
                request.EndDate = endDate.Text;
            }
            // (Optional) Search by the buyer's email address.
            if (payer.Value != string.Empty)
            {
                request.Payer = payer.Value;
            }
            // (Optional) Search by the receiver's email address. If the merchant account has only one email address, this is the primary email. It can also be a non-primary email address.
            if (receiver.Value != string.Empty)
            {
                request.Receiver = receiver.Value;
            }
            // (Optional) Search by the PayPal Account Optional receipt ID. This field is not applicable to point-of-sale transactions.
            if (receiptId.Value != string.Empty)
            {
                request.ReceiptID = receiptId.Value;
            }
            // (Optional) An alphanumeric string (generated by PayPal) that uniquely identifies a recurring profile. You can specify the Profile ID in the TransactionSearch API operation to obtain all payments associated with the identified profile.
            if (profileId.Value != string.Empty)
            {
                request.ProfileID = profileId.Value;
            }
            // (Optional) Search by auction item number of the purchased goods. This field is not applicable to point-of-sale.
            if (auctionItemNumber.Value != string.Empty)
            {
                request.AuctionItemNumber = auctionItemNumber.Value;
            }
            // (Optional) Search by invoice identification key, as set by you for the original transaction. This field searches the records for items the merchant sells.
            if (invoiceID.Value != string.Empty)
            {
                request.InvoiceID = invoiceID.Value;
            }
            // (Optional) Search by credit card number, as set by you for the original transaction. This field searches the records for items the merchant sells. The field is not applicable to point-of-sale.
            // Note: No wildcards are allowed.
            if (cardNumber.Value != string.Empty)
            {
                request.CardNumber = cardNumber.Value;
            }
            // (Optional) Search by classification of transaction. Some kinds of possible classes of transactions are not searchable with this field. You cannot search for bank transfer withdrawals, for example. It is one of the following values:
            // * All – All transaction classifications
            // * Sent – Only payments sent
            // * Received – Only payments received
            // * MassPay – Only mass payments
            // * MoneyRequest – Only money requests
            // * FundsAdded – Only funds added to balance
            // * FundsWithdrawn – Only funds withdrawn from balance
            // * Referral – Only transactions involving referrals
            // * Fee – Only transactions involving fees
            // * Subscription – Only transactions involving subscriptions
            // * Dividend – Only transactions involving dividends
            // * Billpay – Only transactions involving BillPay Transactions
            // * Refund – Only transactions involving funds
            // * CurrencyConversions – Only transactions involving currency conversions
            // * BalanceTransfer – Only transactions involving balance transfers
            // * Reversal – Only transactions involving BillPay reversals
            // * Shipping – Only transactions involving UPS shipping fees
            // * BalanceAffecting – Only transactions that affect the account balance
            // * ECheck – Only transactions involving eCheck
            if (transactionClass.SelectedIndex != 0)
            {
                request.TransactionClass = (PaymentTransactionClassCodeType)
                    Enum.Parse(typeof(PaymentTransactionClassCodeType), transactionClass.SelectedValue);
            }
            // (Optional) Search by transaction amount.
            // Note: You must set the currencyID attribute to one of the 3-character currency codes for any of the supported PayPal currencies.
            if (amount.Value != string.Empty && currencyCode.SelectedIndex != 0)
            {
                request.CurrencyCode = (CurrencyCodeType)
                    Enum.Parse(typeof(CurrencyCodeType), currencyCode.SelectedValue);
                BasicAmountType searchAmount = new BasicAmountType(request.CurrencyCode, amount.Value);
                request.Amount = searchAmount;
                
            }
            // (Optional) Search by transaction status. It is one of the following values:
            // * Pending – The payment is pending. The specific reason the payment is pending is returned by the GetTransactionDetails API PendingReason field.
            // * Processing – The payment is being processed.
            // * Success – The payment has been completed and the funds have been added successfully to your account balance.
            // * Denied – You denied the payment. This happens only if the payment was previously pending.
            // * Reversed – A payment was reversed due to a chargeback or other type of reversal. The funds have been removed from your account balance and returned to the buyer.
            if (transactionStatus.SelectedIndex != 0)
            {
                request.Status = (PaymentTransactionStatusCodeType)
                    Enum.Parse(typeof(PaymentTransactionStatusCodeType), transactionStatus.SelectedValue);
            }

            
            // Invoke the API
            TransactionSearchReq wrapper = new TransactionSearchReq();
            wrapper.TransactionSearchRequest = request;

            // Configuration map containing signature credentials and other required configuration.
            // For a full list of configuration parameters refer in wiki page 
            // [https://github.com/paypal/sdk-core-dotnet/wiki/SDK-Configuration-Parameters]
            Dictionary<string, string> configurationMap = Configuration.GetAcctAndConfig();

            // Create the PayPalAPIInterfaceServiceService service object to make the API call
            PayPalAPIInterfaceServiceService service = new PayPalAPIInterfaceServiceService(configurationMap);

            // # API call 
            // Invoke the TransactionSearch method in service wrapper object  
            TransactionSearchResponseType transactionDetails = service.TransactionSearch(wrapper);

            // Check for API return status
            processResponse(service, transactionDetails);
        }

        private void processResponse(PayPalAPIInterfaceServiceService service, TransactionSearchResponseType response)
        {
            HttpContext CurrContext = HttpContext.Current;
            CurrContext.Items.Add("Response_apiName", "TransactionSearch");
            CurrContext.Items.Add("Response_redirectURL", null);
            CurrContext.Items.Add("Response_requestPayload", service.getLastRequest());
            CurrContext.Items.Add("Response_responsePayload", service.getLastResponse());

            Dictionary<string, string> keyParameters = new Dictionary<string, string>();
            keyParameters.Add("Correlation Id", response.CorrelationID);
            keyParameters.Add("API Result", response.Ack.ToString());

            if (response.Errors != null && response.Errors.Count > 0)
            {
                CurrContext.Items.Add("Response_error", response.Errors);
            }
            else
            {
                CurrContext.Items.Add("Response_error", null);
            }

            if(!response.Ack.Equals(AckCodeType.FAILURE))
            {
                keyParameters.Add("Total matching transactions", response.PaymentTransactions.Count.ToString());

                for (int i = 0; i < response.PaymentTransactions.Count; i++ )
                {
                    PaymentTransactionSearchResultType result = response.PaymentTransactions[i];
                    string label = "Result " + (i+1);
                    keyParameters.Add(label + " Payer", result.Payer);
                    keyParameters.Add(label + " Transaction Id", result.TransactionID);
                    keyParameters.Add(label + " Payment status", result.Status);
                    keyParameters.Add(label + " Payment timestamp", result.Timestamp);
                    keyParameters.Add(label + " Transaction type", result.Type);
                    if (result.NetAmount != null)
                    {
                        keyParameters.Add(label + " Net amount",
                            result.NetAmount.value + result.NetAmount.currencyID.ToString());
                    }
                    if (result.GrossAmount != null)
                    {
                        keyParameters.Add(label + " Gross amount",
                            result.GrossAmount.value + result.GrossAmount.currencyID.ToString());
                    }
                }
            }
            CurrContext.Items.Add("Response_keyResponseObject", keyParameters);
            Server.Transfer("../APIResponse.aspx");

        }
    }
}
